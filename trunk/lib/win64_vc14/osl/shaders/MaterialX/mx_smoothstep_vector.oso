OpenShadingLanguage 1.00
# Compiled by oslc 1.9.9
# options: -q -IE:/db4/build/S/VS1464R/build/osl/src/external_osl/src/shaders/MaterialX -IE:/db4/build/S/VS1464R/build/osl/src/external_osl/src/shaders/MaterialX -IE:/db4/build/S/VS1464R/build/osl/src/external_osl/src/shaders -IE:/db4/build/S/VS1464R/build/osl/src/external_osl/src/shaders -o E:/db4/build/S/VS1464R/build/osl/src/external_osl-build/src/shaders/MaterialX/mx_smoothstep_vector.oso
shader mx_smoothstep_vector	%meta{string,help,"outputs a smooth (hermite-interpolated) remapping of input values from low-high to output 0-1."} 
param	vector	in	0 0 0		%meta{string,help,"input"}  %read{3,11} %write{2147483647,-1}
param	vector	low	0 0 0		%meta{string,help,"input value of this or lower will return 0"}  %read{1,9} %write{2147483647,-1}
param	vector	high	1 1 1		%meta{string,help," an input value of this or higher will result in an output value of 1"}  %read{2,10} %write{2147483647,-1}
oparam	vector	out	0 0 0		%read{2147483647,-1} %write{13,13}
const	string	$const1	"smoothstep"		%read{0,0} %write{2147483647,-1}
temp	float	$tmp1	%read{13,13} %write{4,4}
const	int	$const2	0		%read{1,3} %write{2147483647,-1}
temp	float	$tmp2	%read{4,4} %write{1,1}
temp	float	$tmp3	%read{4,4} %write{2,2}
temp	float	$tmp4	%read{4,4} %write{3,3}
temp	float	$tmp5	%read{13,13} %write{8,8}
const	int	$const3	1		%read{5,7} %write{2147483647,-1}
temp	float	$tmp6	%read{8,8} %write{5,5}
temp	float	$tmp7	%read{8,8} %write{6,6}
temp	float	$tmp8	%read{8,8} %write{7,7}
temp	float	$tmp9	%read{13,13} %write{12,12}
const	int	$const4	2		%read{9,11} %write{2147483647,-1}
temp	float	$tmp10	%read{12,12} %write{9,9}
temp	float	$tmp11	%read{12,12} %write{10,10}
temp	float	$tmp12	%read{12,12} %write{11,11}
code ___main___
# E:/db4/build/S/VS1464R/build/osl/src/external_osl-build/src/shaders/MaterialX/mx_smoothstep_vector.osl:21
#     out = smoothstep(low, high, in);
	functioncall	$const1 14 	%filename{"E:/db4/build/S/VS1464R/build/osl/src/external_osl-build/src/shaders/MaterialX/mx_smoothstep_vector.osl"} %line{21} %argrw{"r"}
# E:\db4\build\S\VS1464R\build\osl\src\external_osl\src\shaders\stdosl.h:331
#     return vector (smoothstep(edge0[0], edge1[0], in[0]),
	compref		$tmp2 low $const2 	%filename{"E:\db4\build\S\VS1464R\build\osl\src\external_osl\src\shaders\stdosl.h"} %line{331} %argrw{"wrr"}
	compref		$tmp3 high $const2 	%argrw{"wrr"}
	compref		$tmp4 in $const2 	%argrw{"wrr"}
	smoothstep	$tmp1 $tmp2 $tmp3 $tmp4 	%argrw{"wrrr"}
# E:\db4\build\S\VS1464R\build\osl\src\external_osl\src\shaders\stdosl.h:332
#                    smoothstep(edge0[1], edge1[1], in[1]),
	compref		$tmp6 low $const3 	%line{332} %argrw{"wrr"}
	compref		$tmp7 high $const3 	%argrw{"wrr"}
	compref		$tmp8 in $const3 	%argrw{"wrr"}
	smoothstep	$tmp5 $tmp6 $tmp7 $tmp8 	%argrw{"wrrr"}
# E:\db4\build\S\VS1464R\build\osl\src\external_osl\src\shaders\stdosl.h:333
#                    smoothstep(edge0[2], edge1[2], in[2]));
	compref		$tmp10 low $const4 	%line{333} %argrw{"wrr"}
	compref		$tmp11 high $const4 	%argrw{"wrr"}
	compref		$tmp12 in $const4 	%argrw{"wrr"}
	smoothstep	$tmp9 $tmp10 $tmp11 $tmp12 	%argrw{"wrrr"}
	vector		out $tmp1 $tmp5 $tmp9 	%argrw{"wrrr"}
	end
