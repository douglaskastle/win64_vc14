OpenShadingLanguage 1.00
# Compiled by oslc 1.9.9
# options: -q -IE:/db4/build/S/VS1464R/build/osl/src/external_osl/src/shaders/MaterialX -IE:/db4/build/S/VS1464R/build/osl/src/external_osl/src/shaders/MaterialX -IE:/db4/build/S/VS1464R/build/osl/src/external_osl/src/shaders -IE:/db4/build/S/VS1464R/build/osl/src/external_osl/src/shaders -o E:/db4/build/S/VS1464R/build/osl/src/external_osl-build/src/shaders/MaterialX/mx_pack_vector4.oso
shader mx_pack_vector4	%meta{string,help,"Pack the channels from two, three or four streams into the same number of channels of a                       single stream of a specified compatible type;"} 
param	float	in1	0		%read{1,1} %write{2147483647,-1}
param	float	in2	0		%read{2,2} %write{2147483647,-1}
param	float	in3	0		%read{3,3} %write{2147483647,-1}
param	float	in4	0		%read{4,4} %write{2147483647,-1}
oparam	struct vector4	out			%read{2147483647,-1} %write{2147483647,-1} %struct{"vector4"} %structfields{x,y,z,w} %structfieldtypes{"ffff"} %structnfields{4}
oparam	float	out.x	0		%read{2147483647,-1} %write{1,1} %mystruct{out} %mystructfield{0}
oparam	float	out.y	0		%read{2147483647,-1} %write{2,2} %mystruct{out} %mystructfield{1}
oparam	float	out.z	0		%read{2147483647,-1} %write{3,3} %mystruct{out} %mystructfield{2}
oparam	float	out.w	0		%read{2147483647,-1} %write{4,4} %mystruct{out} %mystructfield{3}
const	string	$const1	"pack"		%read{0,0} %write{2147483647,-1}
code ___main___
# E:/db4/build/S/VS1464R/build/osl/src/external_osl-build/src/shaders/MaterialX/mx_pack_vector4.osl:21
#     out = pack (in1, in2, in3, in4);
	functioncall	$const1 5 	%filename{"E:/db4/build/S/VS1464R/build/osl/src/external_osl-build/src/shaders/MaterialX/mx_pack_vector4.osl"} %line{21} %argrw{"r"}
# E:\db4\build\S\VS1464R\build\osl\src\external_osl\src\shaders\MaterialX\mx_funcs.h:709
#     return vector4 (a, b, c, d);
	assign		out.x in1 	%filename{"E:\db4\build\S\VS1464R\build\osl\src\external_osl\src\shaders\MaterialX\mx_funcs.h"} %line{709} %argrw{"wr"}
	assign		out.y in2 	%argrw{"wr"}
	assign		out.z in3 	%argrw{"wr"}
	assign		out.w in4 	%argrw{"wr"}
	end
